name: django CI release

on:
  push:
    branches: [ "main" ]
    
  workflow_dispatch:

jobs:
  version:
    needs: [build, test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:  
      dotnetdev_version: ${{ steps.tag_version.outputs.new_tag }}  
      
    steps:
      - uses: actions/checkout@v3
      
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
            
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
          
      - name: Print new tag
        run: echo ${{ steps.tag_version.outputs.new_tag }}

      - name: Log in to Docker Hub  
        uses: docker/login-action@v2  
        with:  
          username: ${{ secrets.DOCKERHUB_USERNAME }}  
          password: ${{ secrets.DOCKERHUB_PASS }}  

      - name: Build the Docker image 
        run: |  
          docker build -f Dockerfile.pro -t ${{ secrets.DOCKERHUB_USERNAME }}/unico-back:${{ steps.tag_version.outputs.new_tag }} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/unico-back:${{ steps.tag_version.outputs.new_tag }}
          docker build -f Dockerfile.pro -t ${{ secrets.DOCKERHUB_USERNAME }}/unico-back:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/unico-back:latest

          # docker build -f=Dockerfile2 -t ${{ secrets.DOCKERHUB_USERNAME }}/developimage:${{ steps.tag_version.outputs.new_tag }} .  
          # docker push ${{ secrets.DOCKERHUB_USERNAME }}/developimage:${{ steps.tag_version.outputs.new_tag }}
          # docker build -f=Dockerfile2 -t ${{ secrets.DOCKERHUB_USERNAME }}/developimage:latest .
          # docker push ${{ secrets.DOCKERHUB_USERNAME }}/developimage:latest

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade --force-reinstall --no-cache-dir -r requirements/production.txt
          
      - name: Install dockerize
        run: |
          curl -sSL https://github.com/jwilder/dockerize/releases/download/v0.6.1/dockerize-linux-amd64-v0.6.1.tar.gz | tar xz -C /usr/local/bin

                
      - name: Get PostgreSQL container IP
        id: postgres_ip
        run: |
          echo "POSTGRES_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' postgres)" >> $GITHUB_ENV
      
      - name: Wait for PostgreSQL to be ready
        run: |
          dockerize -wait tcp://$POSTGRES_IP:5432 -timeout 60s
      
      - name: Run migrations
        env:
          PROD_DB_NAME: test_db
          PROD_DB_USER: test_user
          PROD_DB_PASSWORD: test_password
          PROD_DB_HOST: ${{ env.POSTGRES_IP }} 
          PROD_DB_PORT: 5432
        run: python manage.py migrate
        
      - name: Run tests
        env:
          PROD_DB_NAME: test_db
          PROD_DB_USER: test_user
          PROD_DB_PASSWORD: test_password
          PROD_DB_HOST: localhost
          PROD_DB_PORT: 5432
        run: python manage.py test
